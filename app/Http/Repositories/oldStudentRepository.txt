
//// =================== first  FUNCTION  addStudent ===================

  public function addStudent($request)
  {
    $validation = Validator::make($request->all(), [
      'name' => 'required | min:3',
      'email' => 'required |email | unique:users,email',
      'password' => 'required | min:3',
    ]);

    if ($validation->fails()) {
      return $this->apiResponse(422, 'validation Error', $validation->errors());
    }

    $studentRole = $this->Role::where([['is_staff', '0'], ['is_teacher', '0']])->first()->id;

    $this->User::create([
      'name' => $request->name,
      'email' => $request->email,
      'phone' => $request->phone,
      'password' => Hash::make($request->password),
      'role_id' => $studentRole,
      'status' => 0
    ]);
    return $this->apiResponse(200, 'new student added successfully', null);
  }

//// =================== firstEND FUNCTION  addStudent ===================

// =================== FUNCTION  addStudent with group ===================

    public function addStudent($request)
    {
      $validation = Validator::make($request->all(), [
        'name' => 'required | min:3',
        'email' => 'required |email | unique:users,email',
        'password' => 'required | min:3',
      ]);


      if ($validation->fails()) {
        return $this->apiResponse(422, 'validation Error', $validation->errors());
      }


      if (! $request->has('groups')) {
        return $this->apiResponse(422, 'No Groups Found You need To Join At Least one Group');
      }

      #validating group
          $groups = $request->groups;
        $groupCount=count($groups);
        dd($groupCount);

      for ($i=0; $i < $groupCount-1; $i++) {
        $array[] = ($groups[$i][0]);

       ? $i+1 start count from index 1 (the second item) to compare 
        if (in_array($groups[$i + 1][0], $array)) {
          return $this->apiResponse(422, 'group is repeated' );
        } 
      }      
      $studentRole = $this->Role::where([['is_staff', '0'], ['is_teacher', '0']])->first();
      
      if(! $studentRole){
        return $this->apiResponse(422,'Can not Assign this member', 'Id is not for a student check database');
      }

      $student = $this->User::create([
        'name' => $request->name,
        'email' => $request->email,
        'phone' => $request->phone,
        'password' => Hash::make($request->password),
        'role_id' => $studentRole->id,
        'status' => 0
      ]);

      foreach ($request->groups as $group){
        $requestedGroup = explode(",", $group);
        $this->StudentGroup::create([
          'student_id'=> $student->id,
          'group_id' => $requestedGroup[0],
          'count' => $requestedGroup[1],
          'price' => $requestedGroup[2]
        ]);
      }

      return $this->apiResponse(200, 'new student added successfully', null);
    }

// ===================  END FUNCTION  addStudent with group (string) ===================

// =================== OLD FUNCTION  updateStudent ===================
  public function updateStudent($request)
  {

   ? VAlidation

    $validation = Validator::make($request->all(), [
      'name' => ' min:3',
      'email' => 'email | unique:users,email,' . $request->student_id,
      'password' => ' min:3',
    ]);

    if ($validation->fails()) {
      return $this->apiResponse(422, 'validation Error', $validation->errors());
    }

   ? Check Student existence

    $student = $this->User::where('id', $request->student_id)->whereHas('role', function ($query) {
      return $query->where([['is_staff', '0'], ['is_teacher', '0']]);
    })->first();

    if (!$student) {
      return $this->apiResponse(422, 'Can not update this Item', 'Id is not for a teacher member');
    }

   ! IN CASE OF PARTIAL UPDATE
    $studentEmail    = $this->User::where('id', $request->student_id)->first()->email;
    $studentName     = $this->User::where('id', $request->student_id)->first()->name;
    $studentPhone    = $this->User::where('id', $request->student_id)->first()->phone;
    $studentStatus   = $this->User::where('id', $request->student_id)->first()->status;

    $student->update([
      'name' => $request->name ?? $studentEmail,
      'email' => $request->email ?? $studentName,
      'phone' => $request->phone ?? $studentPhone,
     'role_id'=> $request->role_id??$teacherRole_id,
      'status' => $request->status ?? $studentStatus
    ]);
    return $this->apiResponse(200, 'Student updated successfully', null, $student);
  }
// =================== OLD END FUNCTION  updateStudent ===================